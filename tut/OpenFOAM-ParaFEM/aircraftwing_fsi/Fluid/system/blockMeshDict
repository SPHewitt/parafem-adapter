/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

// USER VALUES
// reference length
D 1.0;

// distances*D
upstream 4.0; 
downstream 10;
crossstream 3.0;
height 5.0;

//  CALCULATED VALUES
negx #calc "$upstream * -1.0 * $D";
posx #calc "$downstream * 1.0 * $D";

negz #calc "$crossstream * -1.0 * $D";
posz #calc "$crossstream * 1.0 * $D";

top #calc "$height * 1.0";
bottom #calc "-5.0* $D";

vertices
(
    ($negx  $bottom   $negz)
    ($posx  $bottom  $negz)
    ($posx  $top  $negz)
    ($negx  $top  $negz)
    ($negx  $bottom   $posz)
    ($posx  $bottom  $posz)
    ($posx  $top  $posz)
    ($negx  $top  $posz)
);


// uniform grid
division #calc "$D/5.0";
xcells #calc "int(std::floor(($upstream+$downstream)/$division))";
ycells #calc "int(std::floor($top/$division))";
zcells #calc "int(std::floor(($crossstream+$crossstream)/$division))";


blocks
(
    hex (0 1 2 3 4 5 6 7) ($xcells $ycells $zcells) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    topAndBottom
    {
        type patch;
        faces
        (
            (3 7 6 2)
            (1 5 4 0)
        );
    }

    inlet
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (2 6 5 1)
        );
    }

    symFront
    {
        type symmetryPlane;
        faces
        (
            (4 5 6 7)
        );
    }

    symBack
    {
        type symmetryPlane;
        faces
        (
            (0 3 2 1)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
